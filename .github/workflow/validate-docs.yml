name: Validate docs

on:
  push:
    branches: [ main ]
  pull_request:
    types: [opened, synchronize] # This will trigger the workflow only when a PR is opened or updated with new commits

jobs:
  sushi:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v5

      - name: Install Sushi
        run: sudo npm install -g fsh-sushi

      - name: Validate with Sushi
        run: sushi .

  ig-publisher:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v5

      - name: Install Jekyll
        run: sudo gem install jekyll

      - name: Install Sushi
        run: sudo npm install -g fsh-sushi

      - name: Install IG publisher
        run: |
          chmod +x ./_updatePublisher.sh
          ./_updatePublisher.sh -y

      - name: Check that the IG builds successfully
        run: |
          chmod +x ./_genonce.sh
          ./_genonce.sh
          echo "✅ IG built successfully"

      - name: Check QA report
        run: |
          # Configuration
          MAX_ALLOWED_ERRORS=0
          MAX_ALLOWED_WARNINGS=0

          if [ ! -f "output/qa.json" ]; then
            echo "❌ QA file not found: output/qa.json"
            exit 1
          fi

          # Extract errors and warnings from qa.json
          ERRORS=$(jq -r '.errs // 0' output/qa.json)
          WARNINGS=$(jq -r '.warnings // 0' output/qa.json)

          echo "  QA Results:"
          echo "   Errors: $ERRORS"
          echo "   Warnings: $WARNINGS"

          # Check if errors exceed threshold
          if [ "$ERRORS" -gt $MAX_ALLOWED_ERRORS ]; then
            echo "❌ Too many errors: $ERRORS (maximum allowed: $MAX_ALLOWED_ERRORS known errors)"
            exit 1
          fi

          # Check if there are any warnings
          if [ "$WARNINGS" -gt $MAX_ALLOWED_WARNINGS ]; then
            echo "❌ Warnings found: $WARNINGS (maximum allowed: $MAX_ALLOWED_WARNINGS)"
            exit 1
          fi

          echo "✅ QA check passed: $ERRORS errors (≤$MAX_ALLOWED_ERRORS) and $WARNINGS warnings (≤$MAX_ALLOWED_WARNINGS)"

      - name: Upload output folder
        if: always() && hashFiles('output/**/*') != ''
        uses: actions/upload-artifact@v4
        with:
          name: ig-output-${{ github.run_number }}
          path: output/
          retention-days: 30
          if-no-files-found: warn